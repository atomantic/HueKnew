name: Build and Deploy to TestFlight

on:
  push:
    branches:
      - main
  pull_request:

env:
  IPHONEOS_DEPLOYMENT_TARGET: ${{ vars.IPHONEOS_DEPLOYMENT_TARGET }}
  TEAM_ID:             ${{ secrets.TEAM_ID }}
  CODESIGN_ALLOCATE:   /usr/bin/codesign_allocate

jobs:
  validate:
    if: github.event_name == 'pull_request'
    runs-on: macos-latest
    name: PR Validation (no signing)
    steps:
      - uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Build (skip signing)
        run: |
          xcodebuild \
            -project HueKnew.xcodeproj \
            -scheme HueKnew \
            -configuration Release \
            -derivedDataPath build \
            clean build \
            IPHONEOS_DEPLOYMENT_TARGET="$IPHONEOS_DEPLOYMENT_TARGET" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO

  build_and_deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: macos-latest
    name: Archive & Deploy (manual signing)
    steps:
      - uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Install certificates into a temporary keychain
        run: |
          # 1) create the keychain (this creates build.keychain-db)
          security create-keychain -p "" build.keychain-db

          # 2) make it the default and unlocked
          security list-keychains -s build.keychain-db
          security default-keychain -s build.keychain-db
          security unlock-keychain -p "" build.keychain-db

          # 3) keep it unlocked for at least an hour
          security set-keychain-settings -t 3600 -u build.keychain-db

          # 4) import your dev and dist certs
          echo "${{ secrets.DEV_CERT_P12_BASE64 }}" | base64 --decode > dev.p12
          security import dev.p12 \
            -k build.keychain-db \
            -P "${{ secrets.DEV_CERT_P12_PASSWORD }}" \
            -T /usr/bin/codesign

          echo "${{ secrets.DIST_CERT_P12_BASE64 }}" | base64 --decode > dist.p12
          security import dist.p12 \
            -k build.keychain-db \
            -P "${{ secrets.DIST_CERT_P12_PASSWORD }}" \
            -T /usr/bin/codesign

          # 5) allow non-interactive codesign access
          security set-key-partition-list \
            -S apple-tool:,apple:codesign \
            -s -k "" build.keychain-db

      - name: Install provisioning profile & extract UUID/Name
        run: |
          # 1) dump and decode the base64 blob
          printf '%s' "${{ secrets.PROV_PROFILE_BASE64 }}" > profile.b64
          echo "profile.b64 size: $(wc -c < profile.b64) bytes"
          openssl base64 -d -in profile.b64 -out tmp.mobileprovision
          echo "tmp.mobileprovision size: $(wc -c < tmp.mobileprovision) bytes"

          # 2) unwrap the CMS container to get raw XML plist
          openssl smime -verify -inform DER -noverify \
            -in tmp.mobileprovision \
            -out decoded.plist

          # 3) read out the UUID and Name
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' decoded.plist)
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' decoded.plist)
          echo "Found provisioning profile UUID=$PROFILE_UUID, Name=$PROFILE_NAME"

          # 4) install it for Xcode
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          mv tmp.mobileprovision \
            "$HOME/Library/MobileDevice/Provisioning Profiles/${PROFILE_UUID}.mobileprovision"

          # 5) export for the next step
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV

      - name: Archive iOS App (manual signing)
        run: |
          # ensure the keychain is still default & unlocked
          security default-keychain -s build.keychain-db
          security unlock-keychain -p "" build.keychain-db
          security set-keychain-settings -t 3600 -u build.keychain-db

          # Archive without codesigning first
          xcodebuild \
            -project HueKnew.xcodeproj \
            -scheme HueKnew \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath build/HueKnew.xcarchive \
            IPHONEOS_DEPLOYMENT_TARGET="$IPHONEOS_DEPLOYMENT_TARGET" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            archive

      - name: Codesign the archive
        run: |
          # ensure the keychain is still default & unlocked
          security default-keychain -s build.keychain-db
          security unlock-keychain -p "" build.keychain-db
          security set-keychain-settings -t 3600 -u build.keychain-db

          # Codesign the app bundle inside the archive
          codesign --force --sign "Apple Distribution" \
            --timestamp=none \
            build/HueKnew.xcarchive/Products/Applications/HueKnew.app

      - name: Create exportOptions.plist
        run: |
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
           "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>$TEAM_ID</string>
            <key>signingStyle</key><string>manual</string>
          </dict>
          </plist>
          EOF

      - name: Export .ipa
        run: |
          xcodebuild -exportArchive \
            -archivePath build/HueKnew.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build/export

      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v3
        with:
          app-path: 'build/export/HueKnew.ipa'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
