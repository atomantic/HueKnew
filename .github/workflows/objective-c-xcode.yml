name: Xcode - Build and Analyze

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and analyse default scheme using xcodebuild command
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'
      
      - name: Set Default Scheme
        run: |
          # Try to get scheme list, but handle failure gracefully
          scheme_list=$(xcodebuild -list -json 2>/dev/null | tr -d "\n" || echo "")
          
          if [ -z "$scheme_list" ]; then
            # If xcodebuild fails, try to find scheme manually
            echo "xcodebuild failed, trying manual scheme detection..."
            if [ -f "HueKnew.xcodeproj/project.pbxproj" ]; then
              # Extract scheme name from project file or use default
              scheme="HueKnew"
            else
              scheme="HueKnew"
            fi
          else
            # Parse JSON to get first target as scheme
            default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
            scheme=$default
          fi
          
          echo $scheme > default
          echo Using scheme: $scheme
      
      - name: Build
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          echo "Building with scheme: $scheme, file: $file_to_build"
          
          # Get available simulators
          xcrun simctl list devices available | grep "iPhone"
          
          # Build for iOS Simulator specifically
          xcodebuild clean build analyze \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
            | xcpretty && exit ${PIPESTATUS[0]}
